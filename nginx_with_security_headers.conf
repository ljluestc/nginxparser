# Sample nginx configuration with security headers
# This demonstrates the security headers parsing functionality

user nginx;
worker_processes 4;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

    sendfile on;
    keepalive_timeout 65;

    upstream backend_api {
        server 192.168.1.100:8080 weight=5;
        server 192.168.1.101:8080 weight=5;
    }

    # Secure production server with comprehensive security headers
    server {
        listen 443 ssl http2;
        server_name secure.example.com;
        root /var/www/secure;

        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/cert.key;
        ssl_protocols TLSv1.2 TLSv1.3;

        # Comprehensive security headers
        add_header X-Frame-Options "DENY";
        add_header X-Content-Type-Options "nosniff";
        add_header X-XSS-Protection "1; mode=block";
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()";
        add_header X-Download-Options "noopen";

        location / {
            index index.html;
        }

        location /api {
            proxy_pass http://backend_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }

    # Standard server with basic security headers
    server {
        listen 80;
        server_name basic.example.com;
        root /var/www/basic;

        # Basic security headers
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header Cross-Origin-Resource-Policy cross-origin;

        location / {
            index index.html;
        }
    }

    # API server with CORS and security headers
    server {
        listen 8443 ssl;
        server_name api.example.com;
        root /var/www/api;

        ssl_certificate /etc/nginx/ssl/api-cert.pem;
        ssl_certificate_key /etc/nginx/ssl/api-cert.key;

        # Security headers for API
        add_header X-Frame-Options "DENY";
        add_header X-Content-Type-Options "nosniff";
        add_header Cross-Origin-Opener-Policy "same-origin";
        add_header Cross-Origin-Embedder-Policy "require-corp";
        add_header Cross-Origin-Resource-Policy "same-site";

        location / {
            proxy_pass http://backend_api;
        }
    }
}
