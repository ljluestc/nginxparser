# Complete nginx configuration testing ALL PRD features

user nginx;
worker_processes 8;
worker_cpu_affinity auto;
error_log /var/log/nginx/error.log error;
pid /var/run/nginx.pid;
worker_rlimit_nofile 65535;

events {
    use epoll;
    worker_connections 20480;
    multi_accept on;
    accept_mutex off;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    sendfile        on;
    tcp_nopush     on;
    keepalive_timeout  65;
    gzip  on;

    # Upstream with weight, max_fails, fail_timeout
    upstream backend_api {
        server 192.168.1.10:8080 weight=5 max_fails=3 fail_timeout=30s;
        server 192.168.1.11:8080 weight=3 max_fails=2 fail_timeout=20s;
        server 192.168.1.12:8080 weight=1 backup;
        server 192.168.1.13:8080 down;
    }

    # Upstream with least_conn load balancing
    upstream backend_web {
        least_conn;
        server 10.0.0.10:80 weight=10;
        server 10.0.0.11:80 weight=10;
    }

    # Upstream with ip_hash
    upstream backend_cache {
        ip_hash;
        server 172.16.0.10:6379;
        server 172.16.0.11:6379;
    }

    # Upstream with hash
    upstream backend_static {
        hash $request_uri consistent;
        server 10.1.1.10:80;
        server 10.1.1.11:80;
    }

    # Server with multiple features
    server {
        listen       80;
        listen       [::]:80;
        server_name  example.com www.example.com;
        root   /var/www/html;
        index  index.html index.htm;

        access_log  /var/log/nginx/example.access.log  main;
        error_log   /var/log/nginx/example.error.log  warn;

        # Location with exact match modifier
        location = / {
            index  index.html;
        }

        # Location with proxy_pass
        location /api {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://backend_api;
        }

        # Location with regex modifier
        location ~ \.php$ {
            root /var/www/html;
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_index index.php;
            include fastcgi_params;
        }

        # Location with rewrite rules
        location /old-path {
            rewrite ^/old-path/(.*)$ /new-path/$1 permanent;
            rewrite ^/old-path$ /new-path redirect;
        }

        # Location with try_files
        location /static {
            root /var/www;
            try_files $uri $uri/ /index.html;
        }

        # Location with case-insensitive regex
        location ~* \.(jpg|jpeg|png|gif|ico)$ {
            root /var/www/images;
            try_files $uri =404;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    # HTTPS server with SSL configuration
    server {
        listen       443 ssl;
        listen       [::]:443 ssl;
        server_name  secure.example.com;
        root   /var/www/secure;
        index  index.html index.htm;

        ssl_certificate      /etc/nginx/ssl/cert.pem;
        ssl_certificate_key  /etc/nginx/ssl/cert.key;
        ssl_protocols        TLSv1.2 TLSv1.3;
        ssl_ciphers          HIGH:!aNULL:!MD5;

        access_log  /var/log/nginx/secure.access.log  main;

        location / {
            try_files $uri $uri/ =404;
        }

        location /api {
            proxy_pass http://backend_api;
            proxy_set_header Host $host;
        }

        location ^~ /admin {
            root /var/www/admin;
            index admin.html;
        }
    }

    # Server testing all upstream types
    server {
        listen       8080;
        server_name  upstream-test.local;

        location /least-conn {
            proxy_pass http://backend_web;
        }

        location /ip-hash {
            proxy_pass http://backend_cache;
        }

        location /hash {
            proxy_pass http://backend_static;
        }

        location /weighted {
            proxy_pass http://backend_api;
        }
    }
}
